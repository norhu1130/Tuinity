From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <spottedleaf@spottedleaf.dev>
Date: Mon, 6 Jul 2020 20:00:48 -0700
Subject: [PATCH] Optimise heightmap access

HeightMap uses DataBits for storage to reduce the memory footprint
of the underlying heightmap. However, this reduction in memory
footprint comes at the cost of encoding/decoding each access.

So we can make the tradeoff of raw array access by using a char
array internally. For every 100,000 chunks, this will add approximately
80MB overhead (4 heightmaps per full chunk) - which is acceptable.

diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 394765e2a0766002ea32ca816c0d95356d1caffb..fc1d6a917f6f4fc0d6f6885f389b5bc54d017c2b 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -380,7 +380,7 @@ public class Chunk implements IChunkAccess {
             Entry<HeightMap.Type, HeightMap> entry = (Entry) iterator.next();
 
             if (ChunkStatus.FULL.h().contains(entry.getKey())) {
-                this.a((HeightMap.Type) entry.getKey()).a(((HeightMap) entry.getValue()).a());
+                this.a((HeightMap.Type) entry.getKey()).copyFrom(((HeightMap) entry.getValue())); // Tuinity
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/DataBits.java b/src/main/java/net/minecraft/server/DataBits.java
index 26b48b5ffa4ce3fbe50810dc1a8070d333a2684f..353b61aa57501fa76ce42dff5ba61bdb6a1e302e 100644
--- a/src/main/java/net/minecraft/server/DataBits.java
+++ b/src/main/java/net/minecraft/server/DataBits.java
@@ -52,6 +52,7 @@ public class DataBits {
         return (int) ((long) i * j + k >> 32 >> this.i);
     }
 
+    public final int getAndSet(final int index, final int value) { return this.a(index, value); } // Tuinity - OBFHELPER
     public int a(int i, int j) {
         //Validate.inclusiveBetween(0L, (long) (this.e - 1), (long) i); // Paper
         //Validate.inclusiveBetween(0L, this.d, (long) j); // Paper
@@ -64,6 +65,7 @@ public class DataBits {
         return j1;
     }
 
+    public final void set(final int index, final int value) { this.b(index, value); } // Tuinity - OBFHELPER
     public void b(int i, int j) {
         //Validate.inclusiveBetween(0L, (long) (this.e - 1), (long) i); // Paper
         //Validate.inclusiveBetween(0L, this.d, (long) j); // Paper
@@ -74,6 +76,7 @@ public class DataBits {
         this.b[k] = l & ~(this.d << i1) | ((long) j & this.d) << i1;
     }
 
+    public final int get(final int index) { return this.a(index); } // Tuinity - OBFHELPER
     public int a(int i) {
         //Validate.inclusiveBetween(0L, (long) (this.e - 1), (long) i); // Paper
         int j = this.b(i);
diff --git a/src/main/java/net/minecraft/server/HeightMap.java b/src/main/java/net/minecraft/server/HeightMap.java
index 476da43b9f0ef35b4985f88e4784b1f8c5222af3..a43c4ca3ea2e0dbf34a177592daed18c64bb14d3 100644
--- a/src/main/java/net/minecraft/server/HeightMap.java
+++ b/src/main/java/net/minecraft/server/HeightMap.java
@@ -19,7 +19,25 @@ public class HeightMap {
     private static final Predicate<IBlockData> b = (iblockdata) -> {
         return iblockdata.getMaterial().isSolid();
     };
-    private final DataBits c = new DataBits(9, 256);
+    // Tuinity start
+    private final char[] heightmap = new char[16 * 16]; // Tuinity - replace with faster access
+    public DataBits toDataBits() {
+        final DataBits ret = new DataBits(9, 256);
+
+        for (int i = 0, len = this.heightmap.length; i < len; ++i) {
+            ret.set(i, this.heightmap[i]);
+        }
+
+        return ret;
+    }
+
+    public void copyFrom(HeightMap other) {
+        if (other.heightmap.length != this.heightmap.length) {
+            throw new IllegalStateException("Heightmap lengths must match");
+        }
+        System.arraycopy(other.heightmap, 0, this.heightmap, 0, this.heightmap.length);
+    }
+    // Tuinity end
     private final Predicate<IBlockData> d;
     private final IChunkAccess e;
 
@@ -107,19 +125,24 @@ public class HeightMap {
     }
 
     private int a(int i) {
-        return this.c.a(i);
+        return this.heightmap[i]; // Tuinity
     }
 
     private void a(int i, int j, int k) {
-        this.c.b(c(i, j), k);
+        this.heightmap[c(i, j)] = (char)k; // Tuinity
     }
 
     public void a(long[] along) {
-        System.arraycopy(along, 0, this.c.a(), 0, along.length);
+        // Tuinity start
+        final DataBits databits = new DataBits(9, 256, along);
+        for (int i = 0, len = this.heightmap.length; i < len; ++i) {
+            this.heightmap[i] = (char)databits.get(i);
+        }
+        // Tuinity end
     }
 
     public long[] a() {
-        return this.c.a();
+        return this.toDataBits().a(); // Tuinity
     }
 
     private static int c(int i, int j) {
